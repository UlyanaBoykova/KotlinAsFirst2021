@file:Suppress("UNUSED_PARAMETER", "ConvertCallChainIntoSequence")

package lesson6.task1


// Урок 6: разбор строк, исключения
// Максимальное количество баллов = 13
// Рекомендуемое количество баллов = 11
// Вместе с предыдущими уроками (пять лучших, 2-6) = 40/54

/**
 * Пример
 *
 * Время представлено строкой вида "11:34:45", содержащей часы, минуты и секунды, разделённые двоеточием.
 * Разобрать эту строку и рассчитать количество секунд, прошедшее с начала дня.
 */
fun timeStrToSeconds(str: String): Int {
    val parts = str.split(":")
    var result = 0
    for (part in parts) {
        val number = part.toInt()
        result = result * 60 + number
    }
    return result
}

/**
 * Пример
 *
 * Дано число n от 0 до 99.
 * Вернуть его же в виде двухсимвольной строки, от "00" до "99"
 */
fun twoDigitStr(n: Int) = if (n in 0..9) "0$n" else "$n"

/**
 * Пример
 *
 * Дано seconds -- время в секундах, прошедшее с начала дня.
 * Вернуть текущее время в виде строки в формате "ЧЧ:ММ:СС".
 */
fun timeSecondsToStr(seconds: Int): String {
    val hour = seconds / 3600
    val minute = (seconds % 3600) / 60
    val second = seconds % 60
    return String.format("%02d:%02d:%02d", hour, minute, second)
}

/**
 * Пример: консольный ввод
 */
fun main() {
    println("Введите время в формате ЧЧ:ММ:СС")
    val line = readLine()
    if (line != null) {
        val seconds = timeStrToSeconds(line)
        if (seconds == -1) {
            println("Введённая строка $line не соответствует формату ЧЧ:ММ:СС")
        } else {
            println("Прошло секунд с начала суток: $seconds")
        }
    } else {
        println("Достигнут <конец файла> в процессе чтения строки. Программа прервана")
    }
}


/**
 * Средняя (4 балла)
 *
 * Дата представлена строкой вида "15 июля 2016".
 * Перевести её в цифровой формат "15.07.2016".
 * День и месяц всегда представлять двумя цифрами, например: 03.04.2011.
 * При неверном формате входной строки вернуть пустую строку.
 *
 * Обратите внимание: некорректная с точки зрения календаря дата (например, 30.02.2009) считается неверными
 * входными данными.
 */
fun dateStrToDigit(str: String): String {
    val parts = str.split(" ")
    var result = ""
    var d = ""
    var i = 0
    var a = arrayOfNulls<String>(3)
    for (part in parts) {
        a[i] = part
        i++
    }
    val x = a[0]?.toInt()
    val y = a[2]?.toInt()
    a[0] = a[0]?.let { twoDigitStr(it.toInt()) }
    when {
        a[1] == "января" -> {
            d = "01"
        }
        a[1] == "февраля" -> {
            d = "02"
        }
        a[1] == "марта" -> {
            d = "03"
        }
        a[1] == "апреля" -> {
            d = "04"
        }
        a[1] == "мая" -> {
            d = "05"
        }
        a[1] == "июня" -> {
            d = "06"
        }
        a[1] == "июля" -> {
            d = "07"
        }
        a[1] == "августа" -> {
            d = "08"
        }
        a[1] == "сентября" -> {
            d = "09"
        }
        a[1] == "октября" -> {
            d = "10"
        }
        a[1] == "ноября" -> {
            d = "11"
        }
        a[1] == "декабря" -> {
            d = "12"
        }
    }
    if (y != null) {
        if ((((d == "01") || (d == "03") || (d == "05") || (d == "07") || (d == "08") || (d == "10") ||
                    (d == "12")) && (x!! <= 31)) ||
            (((d == "04") || (d == "06") || (d == "09") || (d == "11")) && (x!! <= 30)) ||
            ((d == "02") && (x!! <= 29) && (((y % 4 == 0) && (y % 100 != 0)) || ((y % 4 == 0) && (y % 100 == 0) && (y % 400 == 0)))) ||
            ((d == "02") && (x!! <= 28) && ((y % 4 != 0) || ((y % 4 == 0) && (y % 100 == 0) && (y % 400 != 0))))
        ) result = a[0].toString() + "." + d + "." + a[2]
    }
    return result
}

/**
 * Средняя (4 балла)
 *
 * Дата представлена строкой вида "15.07.2016".
 * Перевести её в строковый формат вида "15 июля 2016".
 * При неверном формате входной строки вернуть пустую строку
 *
 * Обратите внимание: некорректная с точки зрения календаря дата (например, 30 февраля 2009) считается неверными
 * входными данными.
 */
fun dateDigitToStr(digital: String): String {
    val parts = digital.split(".")
    var result = ""
    var s = ""
    var i = 0
    var j = 0
    val c: Int
    for (part in parts) {
        j++
    }
    var a = arrayOfNulls<String>(j)
    for (part in parts) {
        a[i] = part
        i++
    }

    var x = a[0]?.toIntOrNull()
    var d = a[1]?.toIntOrNull()
    var y = a[2]?.toIntOrNull()
    if (x == null) x = 1000
    if (d == null) d = 1000
    when {
        a[1] == "01" -> {
            s = "января"
        }
        a[1] == "02" -> {
            s = "февраля"
        }
        a[1] == "03" -> {
            s = "марта"
        }
        a[1] == "04" -> {
            s = "апреля"
        }
        a[1] == "05" -> {
            s = "мая"
        }
        a[1] == "06" -> {
            s = "июня"
        }
        a[1] == "07" -> {
            s = "июля"
        }
        a[1] == "08" -> {
            s = "августа"
        }
        a[1] == "09" -> {
            s = "сентября"
        }
        a[1] == "10" -> {
            s = "октября"
        }
        a[1] == "11" -> {
            s = "ноября"
        }
        a[1] == "12" -> {
            s = "декабря"
        }
    }
    if (y != null) {
        if (((((d == 1) || (d == 3) || (d == 5) || (d == 7) || (d == 8) || (d == 10) ||
                    (d == 12)) && (x <= 31)) ||
                    (((d == 4) || (d == 6) || (d == 9) || (d == 11)) && (x <= 30)) ||
                    ((d == 2) && (x!! <= 29) && (((y % 4 == 0) && (y % 100 != 0)) || ((y % 4 == 0) && (y % 100 == 0) && (y % 400 == 0)))) ||
                    ((d == 2) && (x!! <= 28) && ((y % 4 != 0) || ((y % 4 == 0) && (y % 100 == 0) && (y % 400 != 0))))) &&
            (i == 3)
        ) result = a[0]?.toInt().toString() + " " + s + " " + a[2]
    }
    return result
}

/**
 * Средняя (4 балла)
 *
 * Номер телефона задан строкой вида "+7 (921) 123-45-67".
 * Префикс (+7) может отсутствовать, код города (в скобках) также может отсутствовать.
 * Может присутствовать неограниченное количество пробелов и чёрточек,
 * например, номер 12 --  34- 5 -- 67 -89 тоже следует считать легальным.
 * Перевести номер в формат без скобок, пробелов и чёрточек (но с +), например,
 * "+79211234567" или "123456789" для приведённых примеров.
 * Все символы в номере, кроме цифр, пробелов и +-(), считать недопустимыми.
 * При неверном формате вернуть пустую строку.
 *
 * PS: Дополнительные примеры работы функции можно посмотреть в соответствующих тестах.
 */
fun flattenPhoneNumber(phone: String): String = TODO()

/**
 * Средняя (5 баллов)
 *
 * Результаты спортсмена на соревнованиях в прыжках в длину представлены строкой вида
 * "706 - % 717 % 703".
 * В строке могут присутствовать числа, черточки - и знаки процента %, разделённые пробелами;
 * число соответствует удачному прыжку, - пропущенной попытке, % заступу.
 * Прочитать строку и вернуть максимальное присутствующее в ней число (717 в примере).
 * При нарушении формата входной строки или при отсутствии в ней чисел, вернуть -1.
 */
fun bestLongJump(jumps: String): Int {
    var n = "$jumps "
    val i: Int
    var a = ""
    var b = 0
    var c = 0
    for (i in n.indices) {
        if ((n[i] == '0') || (n[i] == '1') || (n[i] == '2') || (n[i] == '3') || (n[i] == '4') ||
            (n[i] == '5') || (n[i] == '6') || (n[i] == '7') || (n[i] == '8') || (n[i] == '9')
        )
            a += n[i]
        else if ((n[i] == ' ') || (n[i] == '%') || (n[i] == '-')) {
            b = if (a == "") 0
            else a.toInt()
            a = ""
        } else {
            c = 0
            break
        }
        if (b > c) c = b
    }
    if (c == 0) c = -1
    return c
}

/**
 * Сложная (6 баллов)
 *
 * Результаты спортсмена на соревнованиях в прыжках в высоту представлены строкой вида
 * "220 + 224 %+ 228 %- 230 + 232 %%- 234 %".
 * Здесь + соответствует удачной попытке, % неудачной, - пропущенной.
 * Высота и соответствующие ей попытки разделяются пробелом.
 * Прочитать строку и вернуть максимальную взятую высоту (230 в примере).
 * При нарушении формата входной строки, а также в случае отсутствия удачных попыток,
 * вернуть -1.
 */
fun bestHighJump(jumps: String): Int {
    var k = "$jumps-"
    val i: Int
    var n = ""
    var a = ""
    var b = 0
    var c = 0
    for (i in 0..k.length - 1) {
        if (k[i] != ' ') n += k[i]
    }
    for (i in 0..n.length - 2) {
        if ((n[i] == '0') || (n[i] == '1') || (n[i] == '2') || (n[i] == '3') || (n[i] == '4') ||
            (n[i] == '5') || (n[i] == '6') || (n[i] == '7') || (n[i] == '8') || (n[i] == '9')
        )
            a += n[i]
        else if (n[i] == '+') {
            b = if (a == "") 0
            else a.toInt()
            a = ""
        } else if ((n[i] == ' ') || (n[i] == '%') || (n[i] == '-')) {
            b = 0
            a = ""
        } else {
            c = 0
            break
        }
        if (b > c) c = b
    }
    if (c == 0) c = -1
    return c
}

/**
 * Сложная (6 баллов)
 *
 * В строке представлено выражение вида "2 + 31 - 40 + 13",
 * использующее целые положительные числа, плюсы и минусы, разделённые пробелами.
 * Наличие двух знаков подряд "13 + + 10" или двух чисел подряд "1 2" не допускается.
 * Вернуть значение выражения (6 для примера).
 * Про нарушении формата входной строки бросить исключение IllegalArgumentException
 */
fun plusMinus(expression: String): Int = TODO()

/**
 * Сложная (6 баллов)
 *
 * Строка состоит из набора слов, отделённых друг от друга одним пробелом.
 * Определить, имеются ли в строке повторяющиеся слова, идущие друг за другом.
 * Слова, отличающиеся только регистром, считать совпадающими.
 * Вернуть индекс начала первого повторяющегося слова, или -1, если повторов нет.
 * Пример: "Он пошёл в в школу" => результат 9 (индекс первого 'в')
 */
fun firstDuplicateIndex(str: String): Int = TODO()

/**
 * Сложная (6 баллов)
 *
 * Строка содержит названия товаров и цены на них в формате вида
 * "Хлеб 39.9; Молоко 62; Курица 184.0; Конфеты 89.9".
 * То есть, название товара отделено от цены пробелом,
 * а цена отделена от названия следующего товара точкой с запятой и пробелом.
 * Вернуть название самого дорогого товара в списке (в примере это Курица),
 * или пустую строку при нарушении формата строки.
 * Все цены должны быть больше нуля либо равны нулю.
 */
fun mostExpensive(description: String): String = TODO()

/**
 * Сложная (6 баллов)
 *
 * Перевести число roman, заданное в римской системе счисления,
 * в десятичную систему и вернуть как результат.
 * Римские цифры: 1 = I, 4 = IV, 5 = V, 9 = IX, 10 = X, 40 = XL, 50 = L,
 * 90 = XC, 100 = C, 400 = CD, 500 = D, 900 = CM, 1000 = M.
 * Например: XXIII = 23, XLIV = 44, C = 100
 *
 * Вернуть -1, если roman не является корректным римским числом
 */
fun fromRoman(roman: String): Int = TODO()

/**
 * Очень сложная (7 баллов)
 *
 * Имеется специальное устройство, представляющее собой
 * конвейер из cells ячеек (нумеруются от 0 до cells - 1 слева направо) и датчик, двигающийся над этим конвейером.
 * Строка commands содержит последовательность команд, выполняемых данным устройством, например +>+>+>+>+
 * Каждая команда кодируется одним специальным символом:
 *	> - сдвиг датчика вправо на 1 ячейку;
 *  < - сдвиг датчика влево на 1 ячейку;
 *	+ - увеличение значения в ячейке под датчиком на 1 ед.;
 *	- - уменьшение значения в ячейке под датчиком на 1 ед.;
 *	[ - если значение под датчиком равно 0, в качестве следующей команды следует воспринимать
 *  	не следующую по порядку, а идущую за соответствующей следующей командой ']' (с учётом вложенности);
 *	] - если значение под датчиком не равно 0, в качестве следующей команды следует воспринимать
 *  	не следующую по порядку, а идущую за соответствующей предыдущей командой '[' (с учётом вложенности);
 *      (комбинация [] имитирует цикл)
 *  пробел - пустая команда
 *
 * Изначально все ячейки заполнены значением 0 и датчик стоит на ячейке с номером N/2 (округлять вниз)
 *
 * После выполнения limit команд или всех команд из commands следует прекратить выполнение последовательности команд.
 * Учитываются все команды, в том числе несостоявшиеся переходы ("[" при значении под датчиком не равном 0 и "]" при
 * значении под датчиком равном 0) и пробелы.
 *
 * Вернуть список размера cells, содержащий элементы ячеек устройства после завершения выполнения последовательности.
 * Например, для 10 ячеек и командной строки +>+>+>+>+ результат должен быть 0,0,0,0,0,1,1,1,1,1
 *
 * Все прочие символы следует считать ошибочными и формировать исключение IllegalArgumentException.
 * То же исключение формируется, если у символов [ ] не оказывается пары.
 * Выход за границу конвейера также следует считать ошибкой и формировать исключение IllegalStateException.
 * Считать, что ошибочные символы и непарные скобки являются более приоритетной ошибкой чем выход за границу ленты,
 * то есть если в программе присутствует некорректный символ или непарная скобка, то должно быть выброшено
 * IllegalArgumentException.
 * IllegalArgumentException должен бросаться даже если ошибочная команда не была достигнута в ходе выполнения.
 *
 */
fun computeDeviceCells(cells: Int, commands: String, limit: Int): List<Int> = TODO()
